from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from core.config import TOKEN
from core.pdf_tool import extract_text
from core.analyzer import analyze
from core.doc_generator import build
from core.kb_search import find_answer
import pickle
import tempfile
import os
import logging
# --- –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
from sentence_transformers import SentenceTransformer
import faiss
# --- –ö–æ–Ω–µ—Ü –∏–º–ø–æ—Ä—Ç–æ–≤ ---

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π ---
logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ NLP...")
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–∞...")
index = faiss.read_index("data/faiss_index.bin")

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
with open("data/kb_metadata.pkl", "rb") as f:
    metadata_list = pickle.load(f)

logger.info("–ú–æ–¥–µ–ª—å, –∏–Ω–¥–µ–∫—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–∏—Å–∫–∞ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ---
def search_in_knowledge_base(query_text, top_k=1, threshold=0.5):
    """–ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π."""
    if not query_text.strip():
        return []
    query_embedding = model.encode([query_text])
    faiss.normalize_L2(query_embedding.astype('float32'))
    scores, indices = index.search(query_embedding.astype('float32'), top_k)

    results = []
    for i in range(len(indices[0])):
        idx = indices[0][i]
        score = scores[0][i]
        if 0 <= idx < len(metadata_list) and score >= threshold:
            results.append({
                "metadata": metadata_list[idx],
                "score": float(score)
            })
    return results
# --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–∏—Å–∫–∞ ---

API_TOKEN = TOKEN
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_states = {} # {user_id: {'state': str, 'data': dict}}

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
STATE_START = "start"
STATE_WAITING_QUESTION = "waiting_question"
STATE_WAITING_DOC_TYPE = "waiting_doc_type"
STATE_WAITING_DOC_DATA = "waiting_doc_data" # –û–±—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞
STATE_WAITING_DOC_UPLOAD = "waiting_doc_upload" # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

# –¢–∏–ø—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
DOC_TYPES = {
    "–î–æ–≥–æ–≤–æ—Ä —Ä–∞–±–æ—Ç—ã": "work_contract",
    "–î–æ–≥–æ–≤–æ—Ä —É—Å–ª—É–≥–∏": "service_contract",
    "–î–æ–≥–æ–≤–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏": "supply_contract",
    "–¢—Ä—É–¥–æ–≤–æ–π –¥–æ–≥–æ–≤–æ—Ä": "employment_contract",
    "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ": "addendum",
    "–°–æ–≥–ª–∞—à–µ–Ω–∏–µ –æ —Ä–∞—Å—Ç–æ—Ä–∂–µ–Ω–∏–∏": "termination_agreement",
    "–ü—Ä–µ—Ç–µ–Ω–∑–∏—è": "claim",
}

@dp.message_handler(commands="start")
async def start(m: types.Message):
    user_id = m.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª /start. –°–±—Ä–∞—Å—ã–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ /start
    user_states[user_id] = {'state': STATE_START, 'data': {}}
    logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")
    
    # –°–æ–∑–¥–∞—ë–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    kb.add("üìÑ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
    kb.add("üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
    
    await m.answer("–í–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—Å! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(m: types.Message):
    user_id = m.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å'. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_QUESTION}.")
    user_states[user_id]['state'] = STATE_WAITING_QUESTION
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

@dp.message_handler(lambda m: m.text == "üìÑ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç")
async def choose_document_type(m: types.Message):
    user_id = m.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª 'üìÑ –ü–æ–ª—É—á–∏—Ç—å –≥–æ—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç'. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_DOC_TYPE}.")
    user_states[user_id]['state'] = STATE_WAITING_DOC_TYPE
    
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for doc_type in DOC_TYPES.keys():
        kb.add(doc_type)
    kb.add("–ù–∞–∑–∞–¥")
    
    await m.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞:", reply_markup=kb)

@dp.message_handler(lambda m: m.text == "üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç")
async def request_document(m: types.Message):
    user_id = m.from_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª 'üîç –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç'. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_DOC_UPLOAD}.")
    user_states[user_id]['state'] = STATE_WAITING_DOC_UPLOAD
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ PDF-—Ñ–∞–π–ª –∏–ª–∏ —Ñ–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ù–¢–ï–ù–¢–ê (–§–ê–ô–õ–´, –§–û–¢–û) ---
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è PDF
@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_uploaded_document(m: types.Message):
    user_id = m.from_user.id
    state_info = user_states.get(user_id, {'state': STATE_START})
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–ª–∞–ª PDF. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_info['state']}")

    if state_info['state'] == STATE_WAITING_DOC_UPLOAD:
        if not m.document.file_name.lower().endswith(".pdf"):
            await m.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF.")
            return

        with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
            await m.document.download(tmp.name)
            try:
                # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–∑ PDF
                text = extract_text(tmp.name)
                # –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ analyze –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ä–∏—Å–∫–æ–≤/–≤—ã–≤–æ–¥–æ–≤)
                analysis_result = "\n".join(analyze(text))
                await m.answer(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞:\n\n{analysis_result}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {e}")
                await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞.")
            finally:
                os.unlink(tmp.name)
        
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        user_states[user_id] = {'state': STATE_START, 'data': {}}
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ PDF —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")
    else:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç' –∏–∑ –º–µ–Ω—é.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ñ–æ—Ç–æ
@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_uploaded_photo(m: types.Message):
    user_id = m.from_user.id
    state_info = user_states.get(user_id, {'state': STATE_START})
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏—Å–ª–∞–ª —Ñ–æ—Ç–æ. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state_info['state']}")

    if state_info['state'] == STATE_WAITING_DOC_UPLOAD:
        # –ü–æ–ª—É—á–∞–µ–º file_id —Å–∞–º–æ–≥–æ –±–æ–ª—å—à–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ (–Ω–∞–∏–≤—ã—Å—à–µ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
        photo = m.photo[-1]
        file_id = photo.file_id
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        file_info = await bot.get_file(file_id)
        file_path = file_info.file_path
        
        # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp_img:
            await bot.download_file(file_path, tmp_img.name)
            # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ OCR –∏ –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –∞–Ω–∞–ª–∏–∑–∞
            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await m.answer("–§–æ—Ç–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –ø–æ–ª—É—á–µ–Ω–æ. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (OCR) –∏ –∞–Ω–∞–ª–∏–∑ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã –≤ —ç—Ç–æ–º –ø—Ä–∏–º–µ—Ä–µ.")
            os.unlink(tmp_img.name)

        # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞
        user_states[user_id] = {'state': STATE_START, 'data': {}}
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –∞–Ω–∞–ª–∏–∑–∞ —Ñ–æ—Ç–æ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")
    else:
        await m.answer("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ '–†–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç' –∏–∑ –º–µ–Ω—é.")

# --- –û–ë–©–ò–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô (–î–û–õ–ñ–ï–ù –ë–´–¢–¨ –ü–û–°–õ–ï–î–ù–ò–ú) ---
@dp.message_handler()
async def handle_message(m: types.Message):
    user_id = m.from_user.id
    text = m.text.strip()
    state_info = user_states.get(user_id, {'state': STATE_START, 'data': {}})
    state = state_info['state']
    data = state_info['data']
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ '{text}'. –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {state}")

    if state == STATE_WAITING_QUESTION:
        logger.info(f"–ü–æ–∏—Å–∫ –≤ KB –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {text}")
        kb_results = search_in_knowledge_base(text, top_k=1, threshold=0.6)

        if kb_results:
            best_match = kb_results[0]
            source_file = best_match['metadata'].get('source_file', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç')
            chunk_text = best_match['metadata'].get('original_chunk', '')[:500] + "..." # –û–±—Ä–µ–∑–∞–µ–º –¥–ª—è –≤—ã–≤–æ–¥–∞
            score = best_match['score']
            response_text = f"–ù–∞–π–¥–µ–Ω–æ –≤ –¥–æ–∫—É–º–µ–Ω—Ç–µ '{source_file}' (—Å—Ö–æ–∂–µ—Å—Ç—å: {score:.2f}):\n\n{chunk_text}"
        else:
            # –†–µ–∑–µ—Ä–≤–Ω—ã–π –ø–æ–∏—Å–∫
            logger.info(f"–û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ. –ò—Å–ø–æ–ª—å–∑—É—é find_answer –¥–ª—è '{text}'.")
            fallback_answer = find_answer(text)
            response_text = fallback_answer # find_answer –¥–æ–ª–∂–µ–Ω –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å —Å—Ç—Ä–æ–∫—É

        await m.answer(response_text)
        # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å
        user_states[user_id] = {'state': STATE_START, 'data': {}}
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")

    elif state == STATE_WAITING_DOC_TYPE:
        if text in DOC_TYPES:
            data['doc_type'] = DOC_TYPES[text]
            data['doc_data'] = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –¥–æ–≥–æ–≤–æ—Ä–∞
            data['doc_data']['step'] = 'client' # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–π —à–∞–≥
            user_states[user_id]['state'] = STATE_WAITING_DOC_DATA
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ '{text}'. –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Å–æ—Å—Ç–æ—è–Ω–∏–µ {STATE_WAITING_DOC_DATA}.")
            await m.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ '{text}'. –ö—Ç–æ –∑–∞–∫–∞–∑—á–∏–∫/–ø–æ–∫—É–ø–∞—Ç–µ–ª—å/—Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å?")
        elif text == "–ù–∞–∑–∞–¥":
            user_states[user_id] = {'state': STATE_START, 'data': {}}
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ù–∞–∑–∞–¥'. –í–æ–∑–≤—Ä–∞—Ç –≤ {STATE_START}.")
            await start(m) # –ü–æ–≤—Ç–æ—Ä–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –º–µ–Ω—é
        else:
            await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ –º–µ–Ω—é.")

    elif state == STATE_WAITING_DOC_DATA:
        # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞
        step = data['doc_data'].get('step')
        logger.info(f"–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–∞. –®–∞–≥: {step}")
        if step == 'client':
            data['doc_data']['client'] = text
            data['doc_data']['step'] = 'contractor'
            await m.answer("–ö—Ç–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å/–ø–æ—Å—Ç–∞–≤—â–∏–∫/—Ä–∞–±–æ—Ç–Ω–∏–∫?")
        elif step == 'contractor':
            data['doc_data']['contractor'] = text
            data['doc_data']['step'] = 'subject'
            await m.answer("–û —á—ë–º –¥–æ–≥–æ–≤–æ—Ä/—Å–æ–≥–ª–∞—à–µ–Ω–∏–µ?")
        elif step == 'subject':
            data['doc_data']['subject'] = text
            data['doc_data']['step'] = 'price'
            await m.answer("–¶–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–∞?")
        elif step == 'price':
            data['doc_data']['price'] = text
            data['doc_data']['step'] = 'term'
            await m.answer("–°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ–≥–æ–≤–æ—Ä–∞?")
        elif step == 'term':
            data['doc_data']['term'] = text
            # –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç (–ø—Å–µ–≤–¥–æ–∫–æ–¥, –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
            # doc_content = generate_document(data['doc_type'], data['doc_data'])
            # await m.answer_document(doc_content) # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
            await m.answer(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è '{data['doc_type']}' —Å–æ–±—Ä–∞–Ω—ã. (–î–æ–∫—É–º–µ–Ω—Ç –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è...)\n\n"
                           f"–ó–∞–∫–∞–∑—á–∏–∫: {data['doc_data']['client']}\n"
                           f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {data['doc_data']['contractor']}\n"
                           f"–ü—Ä–µ–¥–º–µ—Ç: {data['doc_data']['subject']}\n"
                           f"–¶–µ–Ω–∞: {data['doc_data']['price']}\n"
                           f"–°—Ä–æ–∫: {data['doc_data']['term']}")
            
            # –í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
            user_states[user_id] = {'state': STATE_START, 'data': {}}
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")
        else:
            # –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–æ–≤–∞.")
            user_states[user_id] = {'state': STATE_START, 'data': {}}
            logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")

    elif state == STATE_START:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤—ë–ª –≤ –Ω–∞—á–∞–ª—å–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –Ω–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª —Ç–µ–∫—Å—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {STATE_START}, –Ω–µ –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É.")
        await m.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ–Ω—é.")

    else:
        # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        logger.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏: {state}")
        await m.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start.")
        user_states[user_id] = {'state': STATE_START, 'data': {}}
        logger.info(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Å–±—Ä–æ—à–µ–Ω–æ –¥–æ {STATE_START}.")


if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    executor.start_polling(dp, skip_updates=True)
