# bot.py
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from core.config import TOKEN
from core.pdf_tool import extract_text
from core.analyzer import analyze
from core.doc_generator import build
from core.kb_search import find_answer
import pickle

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ NLP...")
model = SentenceTransformer('paraphrase-multilingual-MiniLM-L12-v2')

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ FAISS –∏–Ω–¥–µ–∫—Å–∞...")
index = faiss.read_index("faiss_index.bin")

logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...")
with open("metadata.pkl", "rb") as f:
    metadata_list = pickle.load(f)

logger.info("–ú–æ–¥–µ–ª—å, –∏–Ω–¥–µ–∫—Å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")
API_TOKEN = TOKEN
bot = Bot(token=API_TOKEN)
dp  = Dispatcher(bot)

user_data = {}   # {user_id: dict}

@dp.message_handler(commands="start")
async def start(m: types.Message):
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÑ –ê–Ω–∞–ª–∏–∑ PDF", "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    await m.answer("üëã LegalAideIPbot ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ò–ü", reply_markup=kb)

@dp.message_handler(content_types=types.ContentType.DOCUMENT)
async def handle_doc(m: types.Message):
    if not m.document.file_name.lower().endswith(".pdf"):
        return await m.reply("–ü—Ä–∏—à–ª–∏—Ç–µ PDF-–¥–æ–≥–æ–≤–æ—Ä")
    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
        await m.document.download(tmp.name)
        text = extract_text(tmp.name)
        os.unlink(tmp.name)
        risks = "\n".join(analyze(text))
        await m.answer(risks)

@dp.message_handler(lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
async def new_contract(m: types.Message):
    user_data[m.from_user.id] = {}
    await m.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")

@dp.message_handler(lambda m: m.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask(m: types.Message):
    await m.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

@dp.message_handler()
async def collect(m: types.Message):
    uid = m.from_user.id
    data = user_data.setdefault(uid, {})
    if "city" not in data:
        data["city"] = m.text
        return await m.answer("–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    if "landlord" not in data:
        data["landlord"] = m.text
        return await m.answer("–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    if "tenant" not in data:
        data["tenant"] = m.text
        return await m.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è (–∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å):")
    if "property" not in data:
        data["property"] = m.text
        return await m.answer("–°—É–º–º–∞ –∞—Ä–µ–Ω–¥—ã –≤ –º–µ—Å—è—Ü (—Ä—É–±.):")
    if "rent" not in data:
        data["rent"] = m.text
        data.update({"day": "01", "month": "—è–Ω–≤–∞—Ä—è", "year": "2025",
                     "landlord_passport": "—Å–µ—Ä–∏—è 1234 ‚Ññ567890",
                     "tenant_passport":  "—Å–µ—Ä–∏—è 9876 ‚Ññ543210"})
        out_path = build(data, f"–∞—Ä–µ–Ω–¥–∞_–ò–ü_{uid}.docx")
        await m.reply_document(types.InputFile(out_path))
        data.clear()
    else:
        await m.answer(find_answer(m.text))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
