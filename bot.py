# bot/bot.py  (aiogram 3.x, Python 3.12)
import asyncio
import tempfile
import os
from aiogram import Bot, Dispatcher, F, types
from aiogram.types import InputFile
from core.config        import TOKEN
from core.pdf_tool      import extract_text
from core.analyzer      import analyze
from core.doc_generator import build
from core.kb_search     import find_answer

API_TOKEN = 8440749347:AAFeXggvdBjedsTHI9cOHrHvG6vUrBnka4Y
bot = Bot(token=API_TOKEN)
dp  = Dispatcher()

user_data = {}                       # {user_id: dict}

# ==================== –ö–õ–ê–í–ò–ê–¢–£–†–ê ====================
def main_menu_kb() -> types.ReplyKeyboardMarkup:
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÑ –ê–Ω–∞–ª–∏–∑ PDF", "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä", "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
    return kb

# ==================== –ö–û–ú–ê–ù–î–´ ====================
@dp.message(F.command == "start")
async def cmd_start(message: types.Message):
    await message.answer("üëã LegalAideIPbot ‚Äì –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –ò–ü", reply_markup=main_menu_kb())

# ==================== –ê–ù–ê–õ–ò–ó PDF ====================
@dp.message(F.document)
async def handle_pdf(message: types.Message):
    if not message.document.file_name.lower().endswith(".pdf"):
        return await message.reply("–ü—Ä–∏—à–ª–∏—Ç–µ PDF-–¥–æ–≥–æ–≤–æ—Ä")
    with tempfile.NamedTemporaryFile(suffix=".pdf", delete=False) as tmp:
        await message.bot.download(message.document.file_id, tmp.name)
        text = extract_text(tmp.name)
        os.unlink(tmp.name)
        risks = "\n".join(analyze(text))
        await message.answer(risks or "‚úÖ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ")

# ==================== –ì–ï–ù–ï–†–ê–¢–û–† –î–û–ì–û–í–û–†–ê ====================
@dp.message(F.text == "üìù –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä")
async def new_contract(message: types.Message):
    user_data[message.from_user.id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–æ—Å–∫–≤–∞):")

# ==================== FAQ ====================
@dp.message(F.text == "‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
async def ask_question(message: types.Message):
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:")

# ==================== –°–ë–û–† –î–ê–ù–ù–´–• + –ì–ï–ù–ï–†–ê–¶–ò–Ø ====================
@dp.message()
async def collect_data(message: types.Message):
    uid  = message.from_user.id
    data = user_data.setdefault(uid, {})

    if "city" not in data:
        data["city"] = message.text
        return await message.answer("–ê—Ä–µ–Ω–¥–æ–¥–∞—Ç–µ–ª—å (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    if "landlord" not in data:
        data["landlord"] = message.text
        return await message.answer("–ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä (–§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é):")
    if "tenant" not in data:
        data["tenant"] = message.text
        return await message.answer("–û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è (–∞–¥—Ä–µ—Å, –ø–ª–æ—â–∞–¥—å):")
    if "property" not in data:
        data["property"] = message.text
        return await message.answer("–°—É–º–º–∞ –∞—Ä–µ–Ω–¥—ã –≤ –º–µ—Å—è—Ü (—Ä—É–±.):")
    if "rent" not in data:
        data["rent"] = message.text
        data.update({"day": "01", "month": "—è–Ω–≤–∞—Ä—è", "year": "2025",
                     "landlord_passport": "—Å–µ—Ä–∏—è 1234 ‚Ññ567890",
                     "tenant_passport":  "—Å–µ—Ä–∏—è 9876 ‚Ññ543210"})
        out_path = build(data, f"–∞—Ä–µ–Ω–¥–∞_–ò–ü_{uid}.docx")
        await message.reply_document(InputFile(out_path))
        data.clear()                       # —Å–±—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    else:
        # FAQ-—Ä–µ–∂–∏–º
        await message.answer(find_answer(message.text))

# ==================== –ó–ê–ü–£–°–ö ====================
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
